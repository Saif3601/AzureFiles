{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "datafactory4000"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dataflow08')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Output_for_dataflow08",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "window1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Film as string,",
						"          Genre as string,",
						"          Lead_Studio as string,",
						"          Audience_score as integer,",
						"          Profitability as double,",
						"          Rotten_Tomatoes as integer,",
						"          Worldwide_Gross as decimal(19,4),",
						"          Year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 window(over(Genre),",
						"     asc(Lead_Studio, true),",
						"     RowNumber = rowNumber(),",
						"          Rank = rank(),",
						"          DenseRank = denseRank()) ~> window1",
						"window1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Window_Rank_and dense ranking_Rownumber'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow09')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Input_for_dataflow09",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "Input_for_Second_09",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Output_for_dataflow_09",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "Output_for_dataflow009",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "output_for_dataflow0009",
								"type": "DatasetReference"
							},
							"name": "sink3"
						}
					],
					"transformations": [
						{
							"name": "unionunionall"
						},
						{
							"name": "split"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Country as string,",
						"          Year as string,",
						"          Product_Type as string,",
						"          Sales as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          Country as string,",
						"          Year as string,",
						"          Product_Type as string,",
						"          Sales as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1, source2 union(byName: true)~> unionunionall",
						"unionunionall split(Country == 'USA',",
						"     Country == 'UK',",
						"     Country == 'IND',",
						"     disjoint: false) ~> split@(Usa, Uk, Ind, default)",
						"split@Usa sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['USA'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"split@Uk sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['UK'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2",
						"split@Ind sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['IND'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink3"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow10')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Input_for_dataflow_10",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "Input_for_second_10",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Output_for_dataflow10_lookup_data",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						},
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Row as string,",
						"          Country as string,",
						"          Year as string,",
						"          Sales as string,",
						"          Cust_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          Cust_id as string,",
						"          Country as string,",
						"          Name as string,",
						"          Age as string,",
						"          Sex as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1, source2 lookup(source1@Country == source2@Country,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'right')~> lookup1",
						"lookup1 split(isMatch(),",
						"     disjoint: true) ~> split1@(Matching)",
						"split1@Matching sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Lookup with matching data.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Input_for_dataflow03",
								"type": "DatasetReference"
							},
							"name": "conditionalsplit"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Output_for_dataflow03",
								"type": "DatasetReference"
							},
							"name": "usind"
						},
						{
							"dataset": {
								"referenceName": "Output_for_dataflow003",
								"type": "DatasetReference"
							},
							"name": "usauk"
						},
						{
							"dataset": {
								"referenceName": "Output_for_dataflow0003",
								"type": "DatasetReference"
							},
							"name": "usaaus"
						},
						{
							"dataset": {
								"referenceName": "Output_for_dataflow00003",
								"type": "DatasetReference"
							},
							"name": "default"
						}
					],
					"transformations": [
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Row as short,",
						"          Country as string,",
						"          Year as short,",
						"          Product_Type as string,",
						"          Sales as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> conditionalsplit",
						"conditionalsplit split(Country == 'USA' || Country == 'IND',",
						"     Country == 'USA' || Country == 'UK',",
						"     Country == 'USA' || Country == 'AUS',",
						"     disjoint: false) ~> split1@(USAIND, USAUK, USAAUS, Default)",
						"split1@USAIND sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['USA_IND'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> usind",
						"split1@USAUK sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['USA_UK'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> usauk",
						"split1@USAAUS sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['USA_AUS'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> usaaus",
						"split1@Default sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['As same as default'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> default"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/movies_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Input_file_for_movie_dataflow",
								"type": "DatasetReference"
							},
							"name": "Movies"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Output_for_movie_dataflow01",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Film as string,",
						"          Genre as string,",
						"          {Lead Studio} as string,",
						"          {Audience score %} as short,",
						"          Profitability as double,",
						"          {Rotten Tomatoes %} as short,",
						"          {Worldwide Gross} as string,",
						"          Year as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Movies",
						"Movies filter(Year >= 2008 && Year <= 2011,",
						"     partitionBy('hash', 1)) ~> filter1",
						"filter1 aggregate(groupBy(Year),",
						"     AvgComedyrating = avg(Profitability)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Year_and_Avg(rating)_transformation '],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataflow_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow01",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow10",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-11T14:04:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow10')]"
			]
		}
	]
}
{
	"name": "dataflow10",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Input_for_dataflow_10",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "Input_for_second_10",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Output_for_dataflow10_lookup_data",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "lookup1"
				},
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Row as string,",
				"          Country as string,",
				"          Year as string,",
				"          Sales as string,",
				"          Cust_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          Cust_id as string,",
				"          Country as string,",
				"          Name as string,",
				"          Age as string,",
				"          Sex as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source1, source2 lookup(source1@Country == source2@Country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'right')~> lookup1",
				"lookup1 split(isMatch(),",
				"     disjoint: true) ~> split1@(Matching)",
				"split1@Matching sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Lookup with matching data.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}